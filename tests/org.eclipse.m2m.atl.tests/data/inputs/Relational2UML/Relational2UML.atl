-- @atlcompiler atl2006
-- @nsURI UML=http://www.eclipse.org/uml2/2.1.0/UML
-- @path Relational=/org.eclipse.m2m.atl.tests/data/inputs/Relational2UML/relational.ecore

module Relational2UML2;
create OUT : UML from IN : Relational, PRO : UML;

-------------------------------------------------------------------------------------------
-- HELPERS --------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------

helper def : stringType : UML!PrimitiveType = OclUndefined;
helper def : integerType : UML!PrimitiveType = OclUndefined;

helper context Relational!Column def : computeType() : UML!PrimitiveType =
	if self.type = #VARCHAR then
		thisModule.stringType
	else 
		if self.type = #NUMERIC then 
			thisModule.integerType
		else
		    thisModule.integerType
		endif
	endif;	

helper def : getStereotype(name : String) : UML!Stereotype =
    UML!Stereotype.allInstancesFrom('PRO')->select(p | p.name = name)->first();
    
-------------------------------------------------------------------------------------------
-- RULES ----------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------



rule Column2Property {
	from
		p : Relational!Column
	to
		out : UML!Property (
			name <- p.name,
			isUnique <- p.isUnique
			,
			type <- thisModule.stringType-- p.computeType()
		)
	do {
	   out.applyStereotype(thisModule.getStereotype('Column'));
--	   out.setValue(out.getAppliedStereotypes()->first(),'isPrimaryKey',true);

	}
}


rule Database2Model {
	from
		d : Relational!Database
	to
		out : UML!Model (
			name <- d.name,
			packagedElement <- Sequence{d.ownedSchemas,integer,string} -> flatten()
		),
		integer : UML!PrimitiveType (
			name <- 'Integer'
		),
		string : UML!PrimitiveType (
			name <- 'String'
		)
	do {
		thisModule.stringType <- string;
	    thisModule.integerType <- integer;

	    out.applyProfile(UML!Profile.allInstancesFrom('PRO')->select(p | p.name = 'relational')->first());
	    out.applyStereotype(thisModule.getStereotype('Database'));	
	    
	    Sequence{1,2,3} -> includesAll(Sequence{1,2,3}) ->  debug('true');
	    Sequence{1,2,3} -> includesAll(Sequence{1,2,4}) ->  debug('false');
	    
--	    '10'.Trim2Integer().debug('10');
--'    -130'.Trim2Integer().debug('    -130');
--'  2 5 '.Trim2Integer().debug('  2 5 ');
--'2 5'.toInteger().debug('2 5');
	}
}

helper context String def: Trim2Integer(): Integer = 
	let s:String = self.trim() in
	let ss:Sequence(String) = s->toSequence() in
	let ints:Sequence(String) = '0123456789'->toSequence() in
	
	if ss.first() = '-' 
	
	then
    	let sp:Sequence(String) = ss->excluding('-') in
	    if ints->includesAll(sp)	
		then
			0-(sp->iterate(i;acc:String=''| acc+i).toInteger())      
		else 
			OclUndefined 
		endif
		
    else
	    if ints->includesAll(ss).debug('')                   
		then
			s.toInteger()
		else 
			OclUndefined 
		endif
		
    endif;
                
rule Table2Class {
	from
		t : Relational!Table
	to
		out : UML!Class (
			name <- t.name,
			ownedAttribute <- t.ownedColumns
		)
	do {
	   out.applyStereotype(thisModule.getStereotype('Table'));
	}
}

rule Schema2Package {
	from
		s : Relational!Schema 
	to
		out : UML!Package (
			name <- s.name,
			packagedElement <- s.ownedTables
		)
	do {
	  out.applyStereotype(thisModule.getStereotype('Schema'));
	}
}
